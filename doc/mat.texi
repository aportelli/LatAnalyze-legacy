This chapter explains how to manipulate the matrix type defined
in LatAnalyze that is the main numerical data type of the
library. All non trivial operations (matrix product,
inversion...) are performed at low level by the @acronym{CBLAS}
library. The performance of the functions described here
will greatly depend of the optimization level of the 
 @acronym{CBLAS} binary linked to LatAnalyze at installation
 time.

@menu
* Definition::
* Allocation::
* Access::
* Tests::
* Operations::
* Linear algebra::
@end menu

@node Definition, Allocation, , Matrices
@section Definition
@cindex matrix type
@tindex mat
Matrices in LatAnalyze got the type @code{mat} defined in
@file{latan/latan_mat.h}, this header is already included in
all other LatAnalyze headers.

@deftp{Data type} mat
This type is a pointer type on a @acronym{GSL} matrix of
@code{double} (@code{typedef mat gsl_matrix*})
@end deftp

As @code{mat} is a pointer type, the use of affectation
operator @code{=} with @code{mat} variables make them
point on the same physical data in memory. To do copies
of matrices, @code{mat_cp} function must be used.

@node Allocation, Access, Definition, Matrices
@section Allocation
@cindex matrix allocation
Here are described the different functions to allocate and
desallocate memory for matrices.

@deftypefun mat mat_create (const size_t init_nrow, const size_t init_ncol)
This function allocate memory for a matrix with @var{init_nrow}
rows and @var{init_ncol} columns.
@end deftypefun

@deftypefun mat mat_create_from_dim (const mat m)
This function allocate memory for a matrix with the same dimensions
than @var{m}.
@end deftypefun

@deftypefun mat mat_create_from_trdim (const mat m)
This function allocate memory for a matrix with the same dimensions
than @var{m} transposed matrix.
@end deftypefun

@deftypefun mat mat_create_from_mat (const mat m)
This function allocate memory for a matrix with the same dimensions
than @var{m} and copy the content of @var{m} into it.
@end deftypefun

@deftypefun mat mat_create_from_ar (const double* ar, const size_t init_nrow, const size_t init_ncol)
This function allocate memory for a matrix with @var{init_nrow}
rows and @var{init_ncol} columns and copy the content of array
@var{ar} into it usin row-major order indexing.
@end deftypefun

@deftypefun mat* mat_ar_create (const size_t nmat, const size_t init_nrow, const size_t init_ncol)
This function allocate an array of @var{nmat} matrices with @var{init_nrow}
rows and @var{init_ncol} columns.
@end deftypefun
@cindex matrix array

@deftypefun mat* mat_ar_create_from_dim (const size_t nmat, const mat m)
This function allocate memory for an array of @var{nmat} matrices with
the same dimensions than @var{m}.
@end deftypefun

@deftypefun void mat_destroy (mat m)
This function desallocate the memory used by matrix @var{m}.
@end deftypefun
 
@deftypefun void mat_ar_destroy (mat* m, const size_t nmat)
This function desallocate the memory used by the matrix array @var{m}
with @var{nmat} elements.
@end deftypefun

@node Access, Tests, Allocation, Matrices
@section Access
@cindex matrix access
Here are described the different functions to access and modify
matrix elements.

@deftypefun size_t nrow (const mat m)
This function returns the number of rows of @var{m}.
@end deftypefun

@deftypefun size_t ncol (const mat m)
This function returns the number of columns of @var{m}.
@end deftypefun

@deftypefun double mat_get (const mat m, const size_t i, const size_t j)
This function return the element  @math{m_ij} of matrix @var{m}  
at row @var{i} and column @var{j}.
@end deftypefun

@deftypefun void mat_set (mat m, const size_t i, const size_t j, const double val)
This function set to @var{val} the element  @math{m_ij} of
matrix @var{m}  at row @var{i} and column @var{j}.
@end deftypefun

@cindex sub-matrix
@deftypefun latan_errno mat_get_subm (mat m, const mat n, const size_t k1, const size_t l1, const size_t k2, const size_t l2)
This function copy into @var{m} the submatrix of @var{n} of
all elements @math{n_ij} with @var{k1} @leq{} @math{i} @leq{} @var{k2}
and @var{l1} @leq{} @math{j} @leq{} @var{l2}.
@end deftypefun
 
@deftypefun latan_errno mat_set_subm (mat m, const mat n, const size_t k1, const size_t l1, const size_t k2, const size_t l2)
This function copy the matrix @var{n} into the submatrix of @var{m} of
all elements @math{m_ij} with @*@var{k1} @leq{} @math{i} @leq{} @var{k2}
and @var{l1} @leq{} @math{j} @leq{} @var{l2}.
@end deftypefun

@node Tests, Operations, Access, Matrices
@section Tests
@cindex matrix tests

@node Operations, Linear algebra, Tests, Matrices
@section Operations
@cindex matrix operations

@node Linear algebra, , Operations, Matrices
@section Linear Algebra
@cindex matrix inversion

